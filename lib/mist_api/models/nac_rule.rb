# mist_api
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module MistApi
  # NacRule Model.
  class NacRule < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # TODO: Write general description for this method
    # @return [NacRuleActionEnum]
    attr_accessor :action

    # all optional, this goes into Access-Accept
    # @return [Array[String]]
    attr_accessor :apply_tags

    # all optional, this goes into Access-Accept
    # @return [Float]
    attr_accessor :created_time

    # enabled or not
    # @return [TrueClass | FalseClass]
    attr_accessor :enabled

    # enabled or not
    # @return [UUID | String]
    attr_accessor :id

    # enabled or not
    # @return [NacRuleMatching]
    attr_accessor :matching

    # enabled or not
    # @return [Float]
    attr_accessor :modified_time

    # enabled or not
    # @return [String]
    attr_accessor :name

    # enabled or not
    # @return [NacRuleMatching]
    attr_accessor :not_matching

    # the order of the rule, lower value implies higher priority
    # @return [Integer]
    attr_accessor :order

    # the order of the rule, lower value implies higher priority
    # @return [UUID | String]
    attr_accessor :org_id

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['action'] = 'action'
      @_hash['apply_tags'] = 'apply_tags'
      @_hash['created_time'] = 'created_time'
      @_hash['enabled'] = 'enabled'
      @_hash['id'] = 'id'
      @_hash['matching'] = 'matching'
      @_hash['modified_time'] = 'modified_time'
      @_hash['name'] = 'name'
      @_hash['not_matching'] = 'not_matching'
      @_hash['order'] = 'order'
      @_hash['org_id'] = 'org_id'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      %w[
        apply_tags
        created_time
        enabled
        id
        matching
        modified_time
        not_matching
        order
        org_id
      ]
    end

    # An array for nullable fields
    def self.nullables
      []
    end

    def initialize(action = nil, name = nil, apply_tags = SKIP,
                   created_time = SKIP, enabled = true, id = SKIP,
                   matching = SKIP, modified_time = SKIP, not_matching = SKIP,
                   order = SKIP, org_id = SKIP)
      @action = action
      @apply_tags = apply_tags unless apply_tags == SKIP
      @created_time = created_time unless created_time == SKIP
      @enabled = enabled unless enabled == SKIP
      @id = id unless id == SKIP
      @matching = matching unless matching == SKIP
      @modified_time = modified_time unless modified_time == SKIP
      @name = name
      @not_matching = not_matching unless not_matching == SKIP
      @order = order unless order == SKIP
      @org_id = org_id unless org_id == SKIP
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      action = hash.key?('action') ? hash['action'] : nil
      name = hash.key?('name') ? hash['name'] : nil
      apply_tags = hash.key?('apply_tags') ? hash['apply_tags'] : SKIP
      created_time = hash.key?('created_time') ? hash['created_time'] : SKIP
      enabled = hash['enabled'] ||= true
      id = hash.key?('id') ? hash['id'] : SKIP
      matching = NacRuleMatching.from_hash(hash['matching']) if hash['matching']
      modified_time = hash.key?('modified_time') ? hash['modified_time'] : SKIP
      not_matching = NacRuleMatching.from_hash(hash['not_matching']) if hash['not_matching']
      order = hash.key?('order') ? hash['order'] : SKIP
      org_id = hash.key?('org_id') ? hash['org_id'] : SKIP

      # Create object from extracted values.
      NacRule.new(action,
                  name,
                  apply_tags,
                  created_time,
                  enabled,
                  id,
                  matching,
                  modified_time,
                  not_matching,
                  order,
                  org_id)
    end
  end
end
