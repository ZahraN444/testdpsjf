# mist_api
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module MistApi
  # NacRuleMatching Model.
  class NacRuleMatching < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # TODO: Write general description for this method
    # @return [NacRuleMatchingAuthTypeEnum]
    attr_accessor :auth_type

    # TODO: Write general description for this method
    # @return [Array[String]]
    attr_accessor :nactags

    # TODO: Write general description for this method
    # @return [Array[NacRuleMatchingPortTypeEnum]]
    attr_accessor :port_types

    # list of site ids to match
    # @return [Array[UUID | String]]
    attr_accessor :site_ids

    # list of sitegroup ids to match
    # @return [Array[UUID | String]]
    attr_accessor :sitegroup_ids

    # list of vendors to match
    # @return [Array[String]]
    attr_accessor :vendor

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['auth_type'] = 'auth_type'
      @_hash['nactags'] = 'nactags'
      @_hash['port_types'] = 'port_types'
      @_hash['site_ids'] = 'site_ids'
      @_hash['sitegroup_ids'] = 'sitegroup_ids'
      @_hash['vendor'] = 'vendor'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      %w[
        auth_type
        nactags
        port_types
        site_ids
        sitegroup_ids
        vendor
      ]
    end

    # An array for nullable fields
    def self.nullables
      []
    end

    def initialize(auth_type = SKIP, nactags = SKIP, port_types = SKIP,
                   site_ids = SKIP, sitegroup_ids = SKIP, vendor = SKIP)
      @auth_type = auth_type unless auth_type == SKIP
      @nactags = nactags unless nactags == SKIP
      @port_types = port_types unless port_types == SKIP
      @site_ids = site_ids unless site_ids == SKIP
      @sitegroup_ids = sitegroup_ids unless sitegroup_ids == SKIP
      @vendor = vendor unless vendor == SKIP
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      auth_type = hash.key?('auth_type') ? hash['auth_type'] : SKIP
      nactags = hash.key?('nactags') ? hash['nactags'] : SKIP
      port_types = hash.key?('port_types') ? hash['port_types'] : SKIP
      site_ids = hash.key?('site_ids') ? hash['site_ids'] : SKIP
      sitegroup_ids = hash.key?('sitegroup_ids') ? hash['sitegroup_ids'] : SKIP
      vendor = hash.key?('vendor') ? hash['vendor'] : SKIP

      # Create object from extracted values.
      NacRuleMatching.new(auth_type,
                          nactags,
                          port_types,
                          site_ids,
                          sitegroup_ids,
                          vendor)
    end
  end
end
