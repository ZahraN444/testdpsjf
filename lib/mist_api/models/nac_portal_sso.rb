# mist_api
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module MistApi
  # NacPortalSso Model.
  class NacPortalSso < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :idp_cert

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :idp_sign_algo

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :idp_sso_url

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :issuer

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :nameid_format

    # TODO: Write general description for this method
    # @return [Array[NacPortalSsoRoleMatching]]
    attr_accessor :sso_role_matching

    # if it's desired to inject a role into Cert's Subject (so it can be used
    # later on in policy)
    # @return [TrueClass | FalseClass]
    attr_accessor :use_sso_role_for_cert

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['idp_cert'] = 'idp_cert'
      @_hash['idp_sign_algo'] = 'idp_sign_algo'
      @_hash['idp_sso_url'] = 'idp_sso_url'
      @_hash['issuer'] = 'issuer'
      @_hash['nameid_format'] = 'nameid_format'
      @_hash['sso_role_matching'] = 'sso_role_matching'
      @_hash['use_sso_role_for_cert'] = 'use_sso_role_for_cert'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      %w[
        idp_cert
        idp_sign_algo
        idp_sso_url
        issuer
        nameid_format
        sso_role_matching
        use_sso_role_for_cert
      ]
    end

    # An array for nullable fields
    def self.nullables
      []
    end

    def initialize(idp_cert = SKIP, idp_sign_algo = SKIP, idp_sso_url = SKIP,
                   issuer = SKIP, nameid_format = SKIP,
                   sso_role_matching = SKIP, use_sso_role_for_cert = SKIP)
      @idp_cert = idp_cert unless idp_cert == SKIP
      @idp_sign_algo = idp_sign_algo unless idp_sign_algo == SKIP
      @idp_sso_url = idp_sso_url unless idp_sso_url == SKIP
      @issuer = issuer unless issuer == SKIP
      @nameid_format = nameid_format unless nameid_format == SKIP
      @sso_role_matching = sso_role_matching unless sso_role_matching == SKIP
      @use_sso_role_for_cert = use_sso_role_for_cert unless use_sso_role_for_cert == SKIP
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      idp_cert = hash.key?('idp_cert') ? hash['idp_cert'] : SKIP
      idp_sign_algo = hash.key?('idp_sign_algo') ? hash['idp_sign_algo'] : SKIP
      idp_sso_url = hash.key?('idp_sso_url') ? hash['idp_sso_url'] : SKIP
      issuer = hash.key?('issuer') ? hash['issuer'] : SKIP
      nameid_format = hash.key?('nameid_format') ? hash['nameid_format'] : SKIP
      # Parameter is an array, so we need to iterate through it
      sso_role_matching = nil
      unless hash['sso_role_matching'].nil?
        sso_role_matching = []
        hash['sso_role_matching'].each do |structure|
          sso_role_matching << (NacPortalSsoRoleMatching.from_hash(structure) if structure)
        end
      end

      sso_role_matching = SKIP unless hash.key?('sso_role_matching')
      use_sso_role_for_cert =
        hash.key?('use_sso_role_for_cert') ? hash['use_sso_role_for_cert'] : SKIP

      # Create object from extracted values.
      NacPortalSso.new(idp_cert,
                       idp_sign_algo,
                       idp_sso_url,
                       issuer,
                       nameid_format,
                       sso_role_matching,
                       use_sso_role_for_cert)
    end
  end
end
