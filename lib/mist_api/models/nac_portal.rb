# mist_api
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module MistApi
  # NacPortal Model.
  class NacPortal < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # TODO: Write general description for this method
    # @return [NacPortalAccessTypeEnum]
    attr_accessor :access_type

    # background image
    # @return [String]
    attr_accessor :bg_image_url

    # in days
    # @return [Integer]
    attr_accessor :cert_expire_time

    # model, version, fingering, events (connecting, disconnect, roaming), which
    # ap
    # @return [TrueClass | FalseClass]
    attr_accessor :enable_telemetry

    # in days
    # @return [Integer]
    attr_accessor :expiry_notification_time

    # in days
    # @return [NacPortalSso]
    attr_accessor :guest_portal_config

    # in days
    # @return [String]
    attr_accessor :name

    # phase 2
    # @return [TrueClass | FalseClass]
    attr_accessor :notify_expiry

    # phase 2
    # @return [String]
    attr_accessor :ssid

    # phase 2
    # @return [NacPortalSso]
    attr_accessor :sso

    # phase 2
    # @return [String]
    attr_accessor :template_url

    # phase 2
    # @return [String]
    attr_accessor :thumbnail_url

    # phase 2
    # @return [String]
    attr_accessor :tos

    # phase 2
    # @return [NacPortalTypeEnum]
    attr_accessor :type

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['access_type'] = 'access_type'
      @_hash['bg_image_url'] = 'bg_image_url'
      @_hash['cert_expire_time'] = 'cert_expire_time'
      @_hash['enable_telemetry'] = 'enable_telemetry'
      @_hash['expiry_notification_time'] = 'expiry_notification_time'
      @_hash['guest_portal_config'] = 'guest_portal_config'
      @_hash['name'] = 'name'
      @_hash['notify_expiry'] = 'notify_expiry'
      @_hash['ssid'] = 'ssid'
      @_hash['sso'] = 'sso'
      @_hash['template_url'] = 'template_url'
      @_hash['thumbnail_url'] = 'thumbnail_url'
      @_hash['tos'] = 'tos'
      @_hash['type'] = 'type'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      %w[
        access_type
        bg_image_url
        cert_expire_time
        enable_telemetry
        expiry_notification_time
        guest_portal_config
        name
        notify_expiry
        ssid
        sso
        template_url
        thumbnail_url
        tos
        type
      ]
    end

    # An array for nullable fields
    def self.nullables
      []
    end

    def initialize(access_type = SKIP, bg_image_url = SKIP,
                   cert_expire_time = SKIP, enable_telemetry = SKIP,
                   expiry_notification_time = SKIP, guest_portal_config = SKIP,
                   name = SKIP, notify_expiry = SKIP, ssid = SKIP, sso = SKIP,
                   template_url = SKIP, thumbnail_url = SKIP, tos = SKIP,
                   type = SKIP)
      @access_type = access_type unless access_type == SKIP
      @bg_image_url = bg_image_url unless bg_image_url == SKIP
      @cert_expire_time = cert_expire_time unless cert_expire_time == SKIP
      @enable_telemetry = enable_telemetry unless enable_telemetry == SKIP
      @expiry_notification_time = expiry_notification_time unless expiry_notification_time == SKIP
      @guest_portal_config = guest_portal_config unless guest_portal_config == SKIP
      @name = name unless name == SKIP
      @notify_expiry = notify_expiry unless notify_expiry == SKIP
      @ssid = ssid unless ssid == SKIP
      @sso = sso unless sso == SKIP
      @template_url = template_url unless template_url == SKIP
      @thumbnail_url = thumbnail_url unless thumbnail_url == SKIP
      @tos = tos unless tos == SKIP
      @type = type unless type == SKIP
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      access_type = hash.key?('access_type') ? hash['access_type'] : SKIP
      bg_image_url = hash.key?('bg_image_url') ? hash['bg_image_url'] : SKIP
      cert_expire_time =
        hash.key?('cert_expire_time') ? hash['cert_expire_time'] : SKIP
      enable_telemetry =
        hash.key?('enable_telemetry') ? hash['enable_telemetry'] : SKIP
      expiry_notification_time =
        hash.key?('expiry_notification_time') ? hash['expiry_notification_time'] : SKIP
      guest_portal_config = NacPortalSso.from_hash(hash['guest_portal_config']) if
        hash['guest_portal_config']
      name = hash.key?('name') ? hash['name'] : SKIP
      notify_expiry = hash.key?('notify_expiry') ? hash['notify_expiry'] : SKIP
      ssid = hash.key?('ssid') ? hash['ssid'] : SKIP
      sso = NacPortalSso.from_hash(hash['sso']) if hash['sso']
      template_url = hash.key?('template_url') ? hash['template_url'] : SKIP
      thumbnail_url = hash.key?('thumbnail_url') ? hash['thumbnail_url'] : SKIP
      tos = hash.key?('tos') ? hash['tos'] : SKIP
      type = hash.key?('type') ? hash['type'] : SKIP

      # Create object from extracted values.
      NacPortal.new(access_type,
                    bg_image_url,
                    cert_expire_time,
                    enable_telemetry,
                    expiry_notification_time,
                    guest_portal_config,
                    name,
                    notify_expiry,
                    ssid,
                    sso,
                    template_url,
                    thumbnail_url,
                    tos,
                    type)
    end
  end
end
