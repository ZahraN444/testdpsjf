# mist_api
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module MistApi
  # OrgsNACPortalsController
  class OrgsNACPortalsController < BaseController
    # List Org NAC Portals
    # @param [UUID | String] org_id Required parameter: Example:
    # @param [Integer] page Optional parameter: Example:1
    # @param [Integer] limit Optional parameter: Example:100
    # @return [Array[NacPortal]] response from the API call.
    def list_org_nac_portals(org_id,
                             page: 1,
                             limit: 100)
      new_api_call_builder
        .request(new_request_builder(HttpMethodEnum::GET,
                                     '/api/v1/orgs/{org_id}/nacportals',
                                     Server::DEFAULT)
                   .template_param(new_parameter(org_id, key: 'org_id')
                                    .should_encode(true))
                   .query_param(new_parameter(page, key: 'page'))
                   .query_param(new_parameter(limit, key: 'limit'))
                   .header_param(new_parameter('application/json', key: 'accept'))
                   .auth(Or.new('apiToken', 'basicAuth', And.new('basicAuth', 'csrfToken'))))
        .response(new_response_handler
                    .deserializer(APIHelper.method(:custom_type_deserializer))
                    .deserialize_into(NacPortal.method(:from_hash))
                    .is_response_array(true)
                    .local_error('400',
                                 'Bad Syntax',
                                 ApiV1OrgsNacportals400ErrorException)
                    .local_error('401',
                                 'Unauthorized',
                                 ApiV1OrgsNacportals401ErrorException)
                    .local_error('403',
                                 'Permission Denied',
                                 ApiV1OrgsNacportals403ErrorException)
                    .local_error('404',
                                 'Not found. The API endpoint doesnâ€™t exist or resource'\
                                  ' doesnâ€™ t exist',
                                 ResponseHttp404Exception)
                    .local_error('429',
                                 'Too Many Request. The API Token used for the request reached'\
                                  ' the 5000 API Calls per hour threshold',
                                 ApiV1OrgsNacportals429ErrorException))
        .execute
    end

    # Get Org NAC Portal
    # @param [UUID | String] org_id Required parameter: Example:
    # @param [UUID | String] nacportal_id Required parameter: Example:
    # @return [NacPortal] response from the API call.
    def get_org_nac_portal(org_id,
                           nacportal_id)
      new_api_call_builder
        .request(new_request_builder(HttpMethodEnum::GET,
                                     '/api/v1/orgs/{org_id}/nacportals/{nacportal_id}',
                                     Server::DEFAULT)
                   .template_param(new_parameter(org_id, key: 'org_id')
                                    .should_encode(true))
                   .template_param(new_parameter(nacportal_id, key: 'nacportal_id')
                                    .should_encode(true))
                   .header_param(new_parameter('application/json', key: 'accept'))
                   .auth(Or.new('apiToken', 'basicAuth', And.new('basicAuth', 'csrfToken'))))
        .response(new_response_handler
                    .deserializer(APIHelper.method(:custom_type_deserializer))
                    .deserialize_into(NacPortal.method(:from_hash))
                    .local_error('400',
                                 'Bad Syntax',
                                 ApiV1OrgsNacportals400ErrorException)
                    .local_error('401',
                                 'Unauthorized',
                                 ApiV1OrgsNacportals401ErrorException)
                    .local_error('403',
                                 'Permission Denied',
                                 ApiV1OrgsNacportals403ErrorException)
                    .local_error('404',
                                 'Not found. The API endpoint doesnâ€™t exist or resource'\
                                  ' doesnâ€™ t exist',
                                 ResponseHttp404Exception)
                    .local_error('429',
                                 'Too Many Request. The API Token used for the request reached'\
                                  ' the 5000 API Calls per hour threshold',
                                 ApiV1OrgsNacportals429ErrorException))
        .execute
    end

    # Update Org NAC Portal
    # @param [UUID | String] org_id Required parameter: Example:
    # @param [UUID | String] nacportal_id Required parameter: Example:
    # @param [NacPortal] body Optional parameter: Example:
    # @return [NacPortal] response from the API call.
    def update_org_nac_portal(org_id,
                              nacportal_id,
                              body: nil)
      new_api_call_builder
        .request(new_request_builder(HttpMethodEnum::PUT,
                                     '/api/v1/orgs/{org_id}/nacportals/{nacportal_id}',
                                     Server::DEFAULT)
                   .template_param(new_parameter(org_id, key: 'org_id')
                                    .should_encode(true))
                   .template_param(new_parameter(nacportal_id, key: 'nacportal_id')
                                    .should_encode(true))
                   .header_param(new_parameter('application/json', key: 'Content-Type'))
                   .body_param(new_parameter(body))
                   .header_param(new_parameter('application/json', key: 'accept'))
                   .body_serializer(proc do |param| param.to_json unless param.nil? end)
                   .auth(Or.new('apiToken', 'basicAuth', And.new('basicAuth', 'csrfToken'))))
        .response(new_response_handler
                    .deserializer(APIHelper.method(:custom_type_deserializer))
                    .deserialize_into(NacPortal.method(:from_hash))
                    .local_error('400',
                                 'Bad Syntax',
                                 ApiV1OrgsNacportals400ErrorException)
                    .local_error('401',
                                 'Unauthorized',
                                 ApiV1OrgsNacportals401ErrorException)
                    .local_error('403',
                                 'Permission Denied',
                                 ApiV1OrgsNacportals403ErrorException)
                    .local_error('404',
                                 'Not found. The API endpoint doesnâ€™t exist or resource'\
                                  ' doesnâ€™ t exist',
                                 ResponseHttp404Exception)
                    .local_error('429',
                                 'Too Many Request. The API Token used for the request reached'\
                                  ' the 5000 API Calls per hour threshold',
                                 ApiV1OrgsNacportals429ErrorException))
        .execute
    end

    # Create Org NAC Portal
    # @param [UUID | String] org_id Required parameter: Example:
    # @param [NacPortal] body Optional parameter: Example:
    # @return [NacPortal] response from the API call.
    def create_org_nac_portal(org_id,
                              body: nil)
      new_api_call_builder
        .request(new_request_builder(HttpMethodEnum::POST,
                                     '/api/v1/orgs/{org_id}/nacportals',
                                     Server::DEFAULT)
                   .template_param(new_parameter(org_id, key: 'org_id')
                                    .should_encode(true))
                   .header_param(new_parameter('application/json', key: 'Content-Type'))
                   .body_param(new_parameter(body))
                   .header_param(new_parameter('application/json', key: 'accept'))
                   .body_serializer(proc do |param| param.to_json unless param.nil? end)
                   .auth(Or.new('apiToken', 'basicAuth', And.new('basicAuth', 'csrfToken'))))
        .response(new_response_handler
                    .deserializer(APIHelper.method(:custom_type_deserializer))
                    .deserialize_into(NacPortal.method(:from_hash))
                    .local_error('400',
                                 'Bad Syntax',
                                 ApiV1OrgsNacportals400ErrorException)
                    .local_error('401',
                                 'Unauthorized',
                                 ApiV1OrgsNacportals401ErrorException)
                    .local_error('403',
                                 'Permission Denied',
                                 ApiV1OrgsNacportals403ErrorException)
                    .local_error('404',
                                 'Not found. The API endpoint doesnâ€™t exist or resource'\
                                  ' doesnâ€™ t exist',
                                 ResponseHttp404Exception)
                    .local_error('429',
                                 'Too Many Request. The API Token used for the request reached'\
                                  ' the 5000 API Calls per hour threshold',
                                 ApiV1OrgsNacportals429ErrorException))
        .execute
    end

    # Delete Org NAC Portal
    # @param [UUID | String] org_id Required parameter: Example:
    # @param [UUID | String] nacportal_id Required parameter: Example:
    # @return [void] response from the API call.
    def delete_org_nac_portal(org_id,
                              nacportal_id)
      new_api_call_builder
        .request(new_request_builder(HttpMethodEnum::DELETE,
                                     '/api/v1/orgs/{org_id}/nacportals/{nacportal_id}',
                                     Server::DEFAULT)
                   .template_param(new_parameter(org_id, key: 'org_id')
                                    .should_encode(true))
                   .template_param(new_parameter(nacportal_id, key: 'nacportal_id')
                                    .should_encode(true))
                   .auth(Or.new('apiToken', 'basicAuth', And.new('basicAuth', 'csrfToken'))))
        .response(new_response_handler
                    .is_response_void(true)
                    .local_error('400',
                                 'Bad Syntax',
                                 ApiV1OrgsNacportals400ErrorException)
                    .local_error('401',
                                 'Unauthorized',
                                 ApiV1OrgsNacportals401ErrorException)
                    .local_error('403',
                                 'Permission Denied',
                                 ApiV1OrgsNacportals403ErrorException)
                    .local_error('404',
                                 'Not found. The API endpoint doesnâ€™t exist or resource'\
                                  ' doesnâ€™ t exist',
                                 ResponseHttp404Exception)
                    .local_error('429',
                                 'Too Many Request. The API Token used for the request reached'\
                                  ' the 5000 API Calls per hour threshold',
                                 ApiV1OrgsNacportals429ErrorException))
        .execute
    end

    # Get List of Org NAC Portal SSO Latest Failures
    # @param [UUID | String] org_id Required parameter: Example:
    # @param [UUID | String] nacportal_id Required parameter: Example:
    # @param [Integer] page Optional parameter: Example:1
    # @param [Integer] limit Optional parameter: Example:100
    # @param [Integer] start Optional parameter: start datetime, can be epoch or
    # relative time like -1d, -1w; -1d if not specified
    # @param [Integer] mend Optional parameter: end datetime, can be epoch or
    # relative time like -1d, -2h; now if not specified
    # @param [String] duration Optional parameter: duration like 7d, 2w
    # @return [ResponseSsoFailureSearch] response from the API call.
    def list_org_nac_portal_sso_latest_failures(org_id,
                                                nacportal_id,
                                                page: 1,
                                                limit: 100,
                                                start: nil,
                                                mend: nil,
                                                duration: '1d')
      new_api_call_builder
        .request(new_request_builder(HttpMethodEnum::GET,
                                     '/api/v1/orgs/{org_id}/nacportals/{nacportal_id}/failures',
                                     Server::DEFAULT)
                   .template_param(new_parameter(org_id, key: 'org_id')
                                    .should_encode(true))
                   .template_param(new_parameter(nacportal_id, key: 'nacportal_id')
                                    .should_encode(true))
                   .query_param(new_parameter(page, key: 'page'))
                   .query_param(new_parameter(limit, key: 'limit'))
                   .query_param(new_parameter(start, key: 'start'))
                   .query_param(new_parameter(mend, key: 'end'))
                   .query_param(new_parameter(duration, key: 'duration'))
                   .header_param(new_parameter('application/json', key: 'accept'))
                   .auth(Or.new('apiToken', 'basicAuth', And.new('basicAuth', 'csrfToken'))))
        .response(new_response_handler
                    .deserializer(APIHelper.method(:custom_type_deserializer))
                    .deserialize_into(ResponseSsoFailureSearch.method(:from_hash))
                    .local_error('400',
                                 'Bad Syntax',
                                 ApiV1OrgsNacportalsFailures400ErrorException)
                    .local_error('401',
                                 'Unauthorized',
                                 ApiV1OrgsNacportalsFailures401ErrorException)
                    .local_error('403',
                                 'Permission Denied',
                                 ApiV1OrgsNacportalsFailures403ErrorException)
                    .local_error('404',
                                 'Not found. The API endpoint doesnâ€™t exist or resource'\
                                  ' doesnâ€™ t exist',
                                 ResponseHttp404Exception)
                    .local_error('429',
                                 'Too Many Request. The API Token used for the request reached'\
                                  ' the 5000 API Calls per hour threshold',
                                 ApiV1OrgsNacportalsFailures429ErrorException))
        .execute
    end

    # Update Org NAC Portal Template
    # @param [UUID | String] org_id Required parameter: Example:
    # @param [UUID | String] nacportal_id Required parameter: Example:
    # @param [NacPortalTemplate] body Optional parameter: Example:
    # @return [void] response from the API call.
    def update_org_nac_portal_tempalte(org_id,
                                       nacportal_id,
                                       body: nil)
      new_api_call_builder
        .request(new_request_builder(HttpMethodEnum::PUT,
                                     '/api/v1/orgs/{org_id}/nacportals/{nacportal_id}/portal_template',
                                     Server::DEFAULT)
                   .template_param(new_parameter(org_id, key: 'org_id')
                                    .should_encode(true))
                   .template_param(new_parameter(nacportal_id, key: 'nacportal_id')
                                    .should_encode(true))
                   .header_param(new_parameter('application/json', key: 'Content-Type'))
                   .body_param(new_parameter(body))
                   .body_serializer(proc do |param| param.to_json unless param.nil? end)
                   .auth(Or.new('apiToken', 'basicAuth', And.new('basicAuth', 'csrfToken'))))
        .response(new_response_handler
                    .is_response_void(true)
                    .local_error('400',
                                 'Bad Syntax',
                                 ApiV1OrgsNacportalsPortalTemplate400ErrorException)
                    .local_error('401',
                                 'Unauthorized',
                                 ApiV1OrgsNacportalsPortalTemplate401ErrorException)
                    .local_error('403',
                                 'Permission Denied',
                                 ApiV1OrgsNacportalsPortalTemplate403ErrorException)
                    .local_error('404',
                                 'Not found. The API endpoint doesnâ€™t exist or resource'\
                                  ' doesnâ€™ t exist',
                                 ResponseHttp404Exception)
                    .local_error('429',
                                 'Too Many Request. The API Token used for the request reached'\
                                  ' the 5000 API Calls per hour threshold',
                                 ApiV1OrgsNacportalsPortalTemplate429ErrorException))
        .execute
    end

    # Upload background image for NAC Portal
    # @param [UUID | String] org_id Required parameter: Example:
    # @param [UUID | String] nacportal_id Required parameter: Example:
    # @param [File | UploadIO] file Optional parameter: Binary file
    # @param [String] json Optional parameter: JSON string describing the
    # upload
    # @return [void] response from the API call.
    def upload_org_nac_portal_image(org_id,
                                    nacportal_id,
                                    file: nil,
                                    json: nil)
      new_api_call_builder
        .request(new_request_builder(HttpMethodEnum::POST,
                                     '/api/v1/orgs/{org_id}/nacportals/{nacportal_id}/portal_image',
                                     Server::DEFAULT)
                   .template_param(new_parameter(org_id, key: 'org_id')
                                    .should_encode(true))
                   .template_param(new_parameter(nacportal_id, key: 'nacportal_id')
                                    .should_encode(true))
                   .multipart_param(new_parameter(file, key: 'file')
                                     .default_content_type('application/octet-stream'))
                   .form_param(new_parameter(json, key: 'json'))
                   .auth(Or.new('apiToken', 'basicAuth', And.new('basicAuth', 'csrfToken'))))
        .response(new_response_handler
                    .is_response_void(true)
                    .local_error('400',
                                 'Bad Syntax',
                                 ApiV1OrgsNacportalsPortalImage400ErrorException)
                    .local_error('401',
                                 'Unauthorized',
                                 ApiV1OrgsNacportalsPortalImage401ErrorException)
                    .local_error('403',
                                 'Permission Denied',
                                 ApiV1OrgsNacportalsPortalImage403ErrorException)
                    .local_error('404',
                                 'Not found. The API endpoint doesnâ€™t exist or resource'\
                                  ' doesnâ€™ t exist',
                                 ResponseHttp404Exception)
                    .local_error('429',
                                 'Too Many Request. The API Token used for the request reached'\
                                  ' the 5000 API Calls per hour threshold',
                                 ApiV1OrgsNacportalsPortalImage429ErrorException))
        .execute
    end

    # Delete background image for NAC Portal
    # If image is not uploaded or is deleted, NAC Portal will use default image.
    # @param [UUID | String] org_id Required parameter: Example:
    # @param [UUID | String] nacportal_id Required parameter: Example:
    # @return [void] response from the API call.
    def delete_org_nac_portal_image(org_id,
                                    nacportal_id)
      new_api_call_builder
        .request(new_request_builder(HttpMethodEnum::DELETE,
                                     '/api/v1/orgs/{org_id}/nacportals/{nacportal_id}/portal_image',
                                     Server::DEFAULT)
                   .template_param(new_parameter(org_id, key: 'org_id')
                                    .should_encode(true))
                   .template_param(new_parameter(nacportal_id, key: 'nacportal_id')
                                    .should_encode(true))
                   .auth(Or.new('apiToken', 'basicAuth', And.new('basicAuth', 'csrfToken'))))
        .response(new_response_handler
                    .is_response_void(true)
                    .local_error('400',
                                 'Bad Syntax',
                                 ApiV1OrgsNacportalsPortalImage400ErrorException)
                    .local_error('401',
                                 'Unauthorized',
                                 ApiV1OrgsNacportalsPortalImage401ErrorException)
                    .local_error('403',
                                 'Permission Denied',
                                 ApiV1OrgsNacportalsPortalImage403ErrorException)
                    .local_error('404',
                                 'Not found. The API endpoint doesnâ€™t exist or resource'\
                                  ' doesnâ€™ t exist',
                                 ResponseHttp404Exception)
                    .local_error('429',
                                 'Too Many Request. The API Token used for the request reached'\
                                  ' the 5000 API Calls per hour threshold',
                                 ApiV1OrgsNacportalsPortalImage429ErrorException))
        .execute
    end
  end
end
